name: Update Code Coverage

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Set up .NET SDK for .NET 8
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'  # Set to .NET 8

      # Step 3: Install dependencies
      - name: Install dependencies
        run: dotnet restore

      # Step 4: Run tests with coverage (Integration Tests)
      - name: Run tests with coverage (Integration Tests)
        run: dotnet test tests/PioConnection.Api.Tests.Intergration/PioConnection.Api.Tests.Intergration.csproj --no-build --collect:"XPlat Code Coverage" --results-directory ./testresults/integration

      # Step 5: Run tests with coverage (Unit Tests)
      - name: Run tests with coverage (Unit Tests)
        run: dotnet test tests/PioConnection.Api.Tests.Unit/PioConnection.Api.Tests.Unit.csproj --no-build --collect:"XPlat Code Coverage" --results-directory ./testresults/unit

      # Step 6: Verify if coverage files are generated
      - name: List testresults directory contents for integration tests
        run: ls -R testresults/integration

      - name: List testresults directory contents for unit tests
        run: ls -R testresults/unit

      # Step 7: Install ReportGenerator tool for report aggregation
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      # Step 8: Merge and generate the final coverage report
      - name: Merge and generate the final coverage report
        run: |
          reportgenerator "-reports:testresults/integration/coverage.cobertura.xml;testresults/unit/coverage.cobertura.xml" \
                          "-targetdir:coverage" -reporttypes:Html;Cobertura

      # Step 9: List the contents of the coverage directory
      - name: List coverage directory contents
        run: ls -R coverage

      # Step 10: Upload combined coverage to Codecov
      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/cobertura.xml
          flags: unittests
          name: total-code-coverage
          fail_ci_if_error: true

      # Step 11: Add or update the badge in README
      - name: Update coverage badge in README
        run: |
          sed -i 's|!\[Coverage\](.*)|![Coverage](https://codecov.io/gh/317jamtay317/YOUR_REPO_NAME/branch/master/graph/badge.svg)|g' README.md
      # Replace 'YOUR_REPO_NAME' with your actual repository name

      # Step 12: Commit updated README with the badge
      - name: Commit updated README
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "Update coverage badge"
          git push
